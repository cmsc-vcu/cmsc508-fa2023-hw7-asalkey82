---
title: Homework 7 - Creating a resume database
author: Adrienne Salkey
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-asalkey82/tree/main>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This database represent a company-wide resume capturing the collective skills and cerifications of all the people in company. The databse captures skills, employees, and their roles within the company. This database will help find specific queries such as unused skills, unsed roles, and people with specific skills.

## Crows-foot diagram

This diagram show the relation between the five tables in the database. People is the main focal point of the diagram as it appears as a foriegn key in all the tables. Peopleskills connects people and skills together, showing all the employees skills. Peopleroles connects people and roles, showing all the employees roles. 

```{mermaid}
%%| echo: false
erDiagram
    PEOPLE ||--o| PEOPLEROLES : exists_in
    PEOPLE ||--o| PEOPLESKILLS: relates
    PEOPLESKILLS ||--|| SKILLS: correlates
    PEOPLEROLES ||--|| ROLES : correlates


    PEOPLE{
        int id
        string first_name
        string last_name
        string email
        string linkendin
        string headshot
        string discord
        string bio
        date date_joined
    }
    PEOPLEROLES {
        primary id
        foreign roles_id
        foreign people_id
        date date_assigned
    }
    SKILLS{
        primary id
        string name
        string description
        string tag
        string url
        int time_commitment
    }
    PEOPLESKILLS {
        primary id
        foreign skill_id
        foreign people_id
        date date_acquired
    }
    ROLES {
        primary id
        string name
        string sort_priority
    }
```
## Examples of data in the database

### People table

The *people* table contains elements that describe the employee's first and last name, email, linkedin, headshot url, brief bio, and date joined.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe  a skill's name, a skill's description, skill tag, the skill url, and skill time commitment. 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the roles name and sort priority. 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
sql = f"""
select 
    people_first_name,
    people_last_name,
    people_email
 from 
    people
order by 
    people_last_name
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List skill names of Person 1
```{python}
sql = f"""
SELECT
    skills_name
from    
    peopleskills a
    inner join people b on (a.people_id=b.people_id)
    inner join skills c on (a.skills_id=c.skills_id)
WHERE
    b.people_id = 1
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names with Skill 6
```{python}
sql = f"""
SELECT
    people_first_name,
    people_last_name
from 
    people a
    left join peopleskills b on (a.people_id=b.people_id)
WHERE 
    b.skills_id = 6
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people with a DEVELOPER role
```{python}
sql = f"""
SELECT
    *
from 
    people a
    left join peopleroles b on (a.people_id=b.people_id)
WHERE 
    b.roles_id = 2
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and email addresses of people without skills
```{python}
sql = f"""
SELECT
    people_first_name,
    people_last_name,
    people_email
from 
    people a
    left join peopleskills b on (a.people_id=b.people_id)
WHERE 
    b.people_id is NULL

"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills
```{python}
sql = f"""
SELECT
    skills_name,
    skills_tag
from    
    skills a
where
    a.skills_id NOT IN (
        SELECT DISTINCT b.skills_id
        FROM peopleskills b
    )
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role
```{python}
sql = f"""
select 
    people_first_name,
    people_last_name,
    skills_name
from 
    people a
    inner join peopleroles b on (a.people_id=b.people_id)
    inner join roles c on (b.roles_id=c.roles_id)
    inner join peopleskills d on (a.people_id=d.people_id)
    inner join skills e on (d.skills_id=e.skills_id)
where
    b.roles_id = 5

"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List ids and names of unused roles
```{python}
sql = f"""
SELECT
    roles_id,
    roles_name
from    
    roles a
where
    a.roles_id NOT IN (
        SELECT DISTINCT b.roles_id
        FROM peopleroles b
    )
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Reflection
Working on this assignment was a great learning exprience on really learning about how a database works and how use the database. It makes a great refence on how to complete certain action that could be helpful on the semester project. While the assignment was helpful, it did feel a little tedious and makes me relize that I may not like working with databases very much. It could be a little less tedious if I did a little bit of the assignment at a time rather than all at once as it is a lot of information to process. I will take that into consideration next time. 
